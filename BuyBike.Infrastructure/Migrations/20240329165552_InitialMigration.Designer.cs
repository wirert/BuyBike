// <auto-generated />
using System;
using BuyBike.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BuyBike.Infrastructure.Migrations
{
    [DbContext(typeof(BuyBikeDbContext))]
    [Migration("20240329165552_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name")
                        .HasComment("User First name");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name")
                        .HasComment("User Last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Category identifier");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description")
                        .HasComment("Category description (optional");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name")
                        .HasComment("Category name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", null, t =>
                        {
                            t.HasComment("Product category");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maiores , fugit atque quod quasi saepe sed nulla reici voluptatem quibusdam!",
                            Name = "Mountain"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Maiores , fugit atque quod quasi saepe sed nulla reici voluptatem quibusdam!",
                            Name = "Road"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maiores , fugit atque quod quasi  quibusdam!",
                            Name = "City"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maiores , fugit atque quod quasi saepe sed nulla reici voluptatem quibusdam!",
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lorem ipsum elit. Maiores , fugit atque quod quasi saepe sed nulla reici voluptatem quibusdam!",
                            Name = "Electric"
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Discount identifier");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("desc")
                        .HasComment("Discount description (optional)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer")
                        .HasColumnName("discount_percent")
                        .HasComment("Discount value - percentage");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Soft delete boolean property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name")
                        .HasComment("Discount name");

                    b.HasKey("Id")
                        .HasName("pk_discounts");

                    b.ToTable("discounts", null, t =>
                        {
                            t.HasComment("Prodict discount");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountPercent = 10,
                            IsActive = true,
                            Name = "10"
                        },
                        new
                        {
                            Id = 2,
                            DiscountPercent = 20,
                            IsActive = true,
                            Name = "20"
                        },
                        new
                        {
                            Id = 3,
                            DiscountPercent = 40,
                            IsActive = true,
                            Name = "40"
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Item identifier");

                    b.Property<int>("InStock")
                        .HasColumnType("integer")
                        .HasColumnName("in_stock")
                        .HasComment("Product items in stock");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Soft delete property");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id")
                        .HasComment("Item's product identifier");

                    b.Property<int?>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size")
                        .HasComment("Item size (enumeration");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("sku")
                        .HasComment("Product item number (SKU)");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_items_product_id");

                    b.ToTable("items", null, t =>
                        {
                            t.HasComment("Product item for sale");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e6b5a05-304d-4d4d-a1f9-bbd2e5d92809"),
                            InStock = 20,
                            IsActive = true,
                            ProductId = new Guid("78804049-030f-4373-be3c-dfb4df261846"),
                            Size = 3,
                            Sku = "ITM0000001"
                        },
                        new
                        {
                            Id = new Guid("5ed9dbe5-9b52-472c-8701-5bb4e47bfc88"),
                            InStock = 10,
                            IsActive = true,
                            ProductId = new Guid("78804049-030f-4373-be3c-dfb4df261846"),
                            Size = 4,
                            Sku = "ITM0000002"
                        },
                        new
                        {
                            Id = new Guid("2f14708a-9fd7-498a-ab57-e207cb92bb02"),
                            InStock = 5,
                            IsActive = true,
                            ProductId = new Guid("78804049-030f-4373-be3c-dfb4df261846"),
                            Size = 2,
                            Sku = "ITM0000003"
                        },
                        new
                        {
                            Id = new Guid("899fc2be-85af-46c9-b1ca-c1bb256fdacf"),
                            InStock = 9,
                            IsActive = true,
                            ProductId = new Guid("751f85bf-9f3a-443d-a66f-1ad719e50b4e"),
                            Size = 2,
                            Sku = "ITM0000004"
                        },
                        new
                        {
                            Id = new Guid("69d4c6ac-225e-4280-99fb-58869eae5333"),
                            InStock = 33,
                            IsActive = true,
                            ProductId = new Guid("751f85bf-9f3a-443d-a66f-1ad719e50b4e"),
                            Size = 3,
                            Sku = "ITM0000005"
                        },
                        new
                        {
                            Id = new Guid("d99f6519-e62d-4653-a950-2ef8f896608d"),
                            InStock = 12,
                            IsActive = true,
                            ProductId = new Guid("6f88c752-2b55-4380-8287-0e85a569abd5"),
                            Size = 3,
                            Sku = "ITM0000006"
                        },
                        new
                        {
                            Id = new Guid("ff30f42a-ec1d-42cd-a3b4-7b5658221d01"),
                            InStock = 18,
                            IsActive = true,
                            ProductId = new Guid("c77e1e5a-86eb-4356-86c1-c6868494df85"),
                            Size = 3,
                            Sku = "ITM0000007"
                        },
                        new
                        {
                            Id = new Guid("f1c54893-bdc1-4b37-baad-db033b2d359b"),
                            InStock = 0,
                            IsActive = true,
                            ProductId = new Guid("c77e1e5a-86eb-4356-86c1-c6868494df85"),
                            Size = 4,
                            Sku = "ITM0000008"
                        },
                        new
                        {
                            Id = new Guid("62af2302-bbfc-48fe-80d2-273db4b3918b"),
                            InStock = 5,
                            IsActive = true,
                            ProductId = new Guid("4f195fb8-03d7-42c0-bbe6-3edc190ce51e"),
                            Size = 1,
                            Sku = "ITM0000009"
                        },
                        new
                        {
                            Id = new Guid("e3ff3a7f-96ac-487c-888d-311bf73018e2"),
                            InStock = 14,
                            IsActive = true,
                            ProductId = new Guid("dd32437b-1dfb-4a4d-bca4-43b1294a925e"),
                            Size = 3,
                            Sku = "ITM0000010"
                        },
                        new
                        {
                            Id = new Guid("9a3c3435-f141-44d2-a7b5-2d408edb5b17"),
                            InStock = 7,
                            IsActive = true,
                            ProductId = new Guid("0c3f8754-5dce-4fd5-bdb6-79fc79b07e75"),
                            Size = 3,
                            Sku = "ITM0000011"
                        },
                        new
                        {
                            Id = new Guid("05fa52be-4af7-4923-8e35-9e337d1f7939"),
                            InStock = 22,
                            IsActive = true,
                            ProductId = new Guid("c8a565f6-eb03-44b1-bed9-68dcdbff914e"),
                            Size = 5,
                            Sku = "ITM0000012"
                        },
                        new
                        {
                            Id = new Guid("a1b1b140-9a70-4bb9-8286-b46f8bdc41f3"),
                            InStock = 17,
                            IsActive = true,
                            ProductId = new Guid("b46a5b25-1e35-4006-b862-71b8b0f7e816"),
                            Size = 5,
                            Sku = "ITM0000013"
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Manufacturer primary key");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Soft delete boolean property");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("logo_url")
                        .HasComment("Manufacturer logo URL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name")
                        .HasComment("Manufacturer name");

                    b.HasKey("Id")
                        .HasName("pk_manufacturers");

                    b.ToTable("manufacturers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69ec3905-081e-433b-a8ec-5baef5cbf0e9"),
                            IsActive = true,
                            LogoUrl = "brand-logos/giant.png",
                            Name = "Giant"
                        },
                        new
                        {
                            Id = new Guid("d40d9dfe-8f24-4bce-8414-b1dbdd3a2df5"),
                            IsActive = true,
                            LogoUrl = "brand-logos/cross.jpg",
                            Name = "Cross"
                        },
                        new
                        {
                            Id = new Guid("62bc8c33-2658-4720-ad78-2bb6ba71ee87"),
                            IsActive = true,
                            LogoUrl = "brand-logos/cube.png",
                            Name = "Cube"
                        },
                        new
                        {
                            Id = new Guid("fb2ef438-d045-4e5c-8022-d979204b4f29"),
                            IsActive = true,
                            LogoUrl = "brand-logos/head.png",
                            Name = "Head"
                        },
                        new
                        {
                            Id = new Guid("2a63178e-c137-4f76-8bb0-fb2a741c540b"),
                            IsActive = true,
                            LogoUrl = "brand-logos/specialized.png",
                            Name = "Specialized"
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Order identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("address")
                        .HasComment("Order shipping street address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("city")
                        .HasComment("Order delivery city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("country")
                        .HasComment("Order delivery country");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date")
                        .HasComment("Order time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Order user identifier");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("integer")
                        .HasColumnName("zip_code")
                        .HasComment("Order shipping zip code");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("User products order");
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id")
                        .HasComment("Order id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id")
                        .HasComment("Ordered item id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity")
                        .HasComment("Item quantity");

                    b.HasKey("OrderId", "ItemId")
                        .HasName("pk_order_items");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_order_items_item_id");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasComment("Connecting table between orders and items");
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Product primary key");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id")
                        .HasComment("Product category identifier");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color")
                        .HasComment("Product color (optional)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description")
                        .HasComment("Product description (optional");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("integer")
                        .HasColumnName("discount_id")
                        .HasComment("Product discount id");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender")
                        .HasComment("Gender (optional)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("image_url")
                        .HasComment("Model Image URL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Soft delete boolean property");

                    b.Property<Guid>("MakeId")
                        .HasColumnType("uuid")
                        .HasColumnName("make_id")
                        .HasComment("Product manufacturer id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name")
                        .HasComment("Product name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price")
                        .HasComment("Product price");

                    b.Property<string>("Specification")
                        .HasColumnType("jsonb")
                        .HasColumnName("specification")
                        .HasComment("Product specification");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("DiscountId")
                        .HasDatabaseName("ix_products_discount_id");

                    b.HasIndex("MakeId")
                        .HasDatabaseName("ix_products_make_id");

                    b.ToTable("products", null, t =>
                        {
                            t.HasComment("Shop product model");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Bicycle", b =>
                {
                    b.HasBaseType("BuyBike.Infrastructure.Data.Entities.Product");

                    b.Property<int>("Brakes")
                        .HasColumnType("integer")
                        .HasColumnName("brakes")
                        .HasComment("Brakes type");

                    b.Property<int>("Material")
                        .HasColumnType("integer")
                        .HasColumnName("material")
                        .HasComment("Frame's material");

                    b.Property<string>("Style")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("style")
                        .HasComment("Bicycle riding style");

                    b.Property<string>("Suspention")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("suspention")
                        .HasComment("Suspention type");

                    b.Property<double>("TyreSize")
                        .HasColumnType("double precision")
                        .HasColumnName("tyre_size")
                        .HasComment("Tyre size");

                    b.ToTable("bicycles", null, t =>
                        {
                            t.HasComment("Bicycle");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78804049-030f-4373-be3c-dfb4df261846"),
                            CategoryId = 1,
                            Color = "Black",
                            DiscountId = 1,
                            ImageUrl = "bicycles/mountain/FATHOM_1_29_ColorBBlack_Charcoal.jpg",
                            IsActive = true,
                            MakeId = new Guid("69ec3905-081e-433b-a8ec-5baef5cbf0e9"),
                            Name = "Fathom 1",
                            Price = 3499m,
                            Specification = "{\"Рамка\": \"S-Works FACT 12m Carbon, Progressive XC Race Geometry, Rider-First Engineered™, threaded BB, 12x148mm rear spacing, internal cable routing, 100mm of travel\", \"Вилка\": \"RockShox SID SL ULTIMATE BRAIN, Top-Adjust Brain damper, Debon Air, 15x110mm, 44mm offset, 100mm Travel\", \"Заден дерайльор\": \"SRAM XX1 Eagle AXS\", \"Команди\": \"SRAM Eagle AXS Rocker Paddle\", \"Касета\": \"Sram XG-1299, 12-Speed, 10-52t\", \"Курбели\": \"Quarq XX1 Powermeter, DUB, 170/175mm, 34t\", \"Кормило\": \"S-Works Carbon XC Mini Rise, 6-degree upsweep, 8-degree backsweep, 10mm rise, 760mm, 31.8mm\"}",
                            Brakes = 0,
                            Material = 0,
                            Style = "Крос кънтри / XC",
                            Suspention = "Амортисьорна вилка",
                            TyreSize = 29.0
                        },
                        new
                        {
                            Id = new Guid("751f85bf-9f3a-443d-a66f-1ad719e50b4e"),
                            CategoryId = 1,
                            Color = "White",
                            ImageUrl = "bicycles/mountain/FATHOM_1_29_ColorBBlack_Charcoal.jpg",
                            IsActive = true,
                            MakeId = new Guid("69ec3905-081e-433b-a8ec-5baef5cbf0e9"),
                            Name = "Fathom 1",
                            Price = 3499m,
                            Specification = "{\"Рамка\": \"S-Works FACT 12m Carbon, Progressive XC Race Geometry, Rider-First Engineered™, threaded BB, 12x148mm rear spacing, internal cable routing, 100mm of travel\", \"Вилка\": \"RockShox SID SL ULTIMATE BRAIN, Top-Adjust Brain damper, Debon Air, 15x110mm, 44mm offset, 100mm Travel\", \"Заден дерайльор\": \"SRAM XX1 Eagle AXS\", \"Команди\": \"SRAM Eagle AXS Rocker Paddle\", \"Касета\": \"Sram XG-1299, 12-Speed, 10-52t\", \"Курбели\": \"Quarq XX1 Powermeter, DUB, 170/175mm, 34t\", \"Кормило\": \"S-Works Carbon XC Mini Rise, 6-degree upsweep, 8-degree backsweep, 10mm rise, 760mm, 31.8mm\"}",
                            Brakes = 0,
                            Material = 0,
                            Style = "Крос кънтри / XC",
                            Suspention = "Амортисьорна вилка",
                            TyreSize = 29.0
                        },
                        new
                        {
                            Id = new Guid("6f88c752-2b55-4380-8287-0e85a569abd5"),
                            CategoryId = 1,
                            Color = "White",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            DiscountId = 2,
                            ImageUrl = "bicycles/mountain/Epic_Expert_Morn_White.jpg",
                            IsActive = true,
                            MakeId = new Guid("2a63178e-c137-4f76-8bb0-fb2a741c540b"),
                            Name = "Epic Expert Morn",
                            Price = 13599m,
                            Brakes = 0,
                            Material = 1,
                            Style = "DOWNHILL",
                            Suspention = "Пълно окачване",
                            TyreSize = 29.0
                        },
                        new
                        {
                            Id = new Guid("c77e1e5a-86eb-4356-86c1-c6868494df85"),
                            CategoryId = 3,
                            Color = "Silver",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            Gender = 0,
                            ImageUrl = "bicycles/city/Touring_Pro_28_Silver.jpg",
                            IsActive = true,
                            MakeId = new Guid("62bc8c33-2658-4720-ad78-2bb6ba71ee87"),
                            Name = "Touring Pro",
                            Price = 1699m,
                            Specification = "{\"Рамка\": \"S-Works FACT 12m Carbon, Progressive XC Race Geometry, Rider-First Engineered™, threaded BB, 12x148mm rear spacing, internal cable routing, 100mm of travel\", \"Вилка\": \"RockShox SID SL ULTIMATE BRAIN, Top-Adjust Brain damper, Debon Air, 15x110mm, 44mm offset, 100mm Travel\", \"Заден дерайльор\": \"SRAM XX1 Eagle AXS\", \"Команди\": \"SRAM Eagle AXS Rocker Paddle\", \"Касета\": \"Sram XG-1299, 12-Speed, 10-52t\", \"Курбели\": \"Quarq XX1 Powermeter, DUB, 170/175mm, 34t\", \"Кормило\": \"S-Works Carbon XC Mini Rise, 6-degree upsweep, 8-degree backsweep, 10mm rise, 760mm, 31.8mm\"}",
                            Brakes = 1,
                            Material = 0,
                            Style = "City / Градски",
                            Suspention = "Твърда вилка",
                            TyreSize = 28.0
                        },
                        new
                        {
                            Id = new Guid("4f195fb8-03d7-42c0-bbe6-3edc190ce51e"),
                            CategoryId = 3,
                            Color = "Grey",
                            Gender = 1,
                            ImageUrl = "bicycles/city/Nulane_Pro_28_Grey.png",
                            IsActive = true,
                            MakeId = new Guid("62bc8c33-2658-4720-ad78-2bb6ba71ee87"),
                            Name = "Nulane Pro",
                            Price = 3899m,
                            Brakes = 1,
                            Material = 0,
                            Style = "Treking",
                            Suspention = "Твърда вилка",
                            TyreSize = 28.0
                        },
                        new
                        {
                            Id = new Guid("dd32437b-1dfb-4a4d-bca4-43b1294a925e"),
                            CategoryId = 2,
                            Color = "Red",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            ImageUrl = "bicycles/road/Allez_E5_28_red.jpg",
                            IsActive = true,
                            MakeId = new Guid("2a63178e-c137-4f76-8bb0-fb2a741c540b"),
                            Name = "Allez E5",
                            Price = 2399m,
                            Specification = "{\"Рамка\": \"S-Works FACT 12m Carbon, Progressive XC Race Geometry, Rider-First Engineered™, threaded BB, 12x148mm rear spacing, internal cable routing, 100mm of travel\", \"Вилка\": \"RockShox SID SL ULTIMATE BRAIN, Top-Adjust Brain damper, Debon Air, 15x110mm, 44mm offset, 100mm Travel\", \"Заден дерайльор\": \"SRAM XX1 Eagle AXS\", \"Команди\": \"SRAM Eagle AXS Rocker Paddle\", \"Касета\": \"Sram XG-1299, 12-Speed, 10-52t\", \"Курбели\": \"Quarq XX1 Powermeter, DUB, 170/175mm, 34t\", \"Кормило\": \"S-Works Carbon XC Mini Rise, 6-degree upsweep, 8-degree backsweep, 10mm rise, 760mm, 31.8mm\"}",
                            Brakes = 1,
                            Material = 0,
                            Style = "Gravel Bike",
                            Suspention = "Амортисьорна вилка",
                            TyreSize = 28.0
                        },
                        new
                        {
                            Id = new Guid("0c3f8754-5dce-4fd5-bdb6-79fc79b07e75"),
                            CategoryId = 2,
                            Color = "Blue",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            DiscountId = 3,
                            ImageUrl = "bicycles/road/Litening_Aero_28_Blue.jpg",
                            IsActive = true,
                            MakeId = new Guid("62bc8c33-2658-4720-ad78-2bb6ba71ee87"),
                            Name = "Litening Aero",
                            Price = 14899m,
                            Specification = "{\"Рамка\": \"S-Works FACT 12m Carbon, Progressive XC Race Geometry, Rider-First Engineered™, threaded BB, 12x148mm rear spacing, internal cable routing, 100mm of travel\", \"Вилка\": \"RockShox SID SL ULTIMATE BRAIN, Top-Adjust Brain damper, Debon Air, 15x110mm, 44mm offset, 100mm Travel\", \"Заден дерайльор\": \"SRAM XX1 Eagle AXS\", \"Команди\": \"SRAM Eagle AXS Rocker Paddle\", \"Касета\": \"Sram XG-1299, 12-Speed, 10-52t\", \"Курбели\": \"Quarq XX1 Powermeter, DUB, 170/175mm, 34t\", \"Кормило\": \"S-Works Carbon XC Mini Rise, 6-degree upsweep, 8-degree backsweep, 10mm rise, 760mm, 31.8mm\"}",
                            Brakes = 0,
                            Material = 1,
                            Style = "Шосе",
                            Suspention = "Амортисьорна вилка",
                            TyreSize = 28.0
                        },
                        new
                        {
                            Id = new Guid("c8a565f6-eb03-44b1-bed9-68dcdbff914e"),
                            CategoryId = 4,
                            Color = "Blue",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            DiscountId = 2,
                            ImageUrl = "bicycles/kids/Boxer_12_blue.jpg",
                            IsActive = true,
                            MakeId = new Guid("d40d9dfe-8f24-4bce-8414-b1dbdd3a2df5"),
                            Name = "Boxer",
                            Price = 299m,
                            Specification = "{\"Рамка\": \"лека алуминиева\", \"Седалка\": \"регулируема седалка от 350 мм до 400 мм\", \"Кормило\": \"регулируемо във височина от 490мм до 540мм, дължина - 400мм, диаметър - 22,2мм\", \"Спирачка\": \"V\", \"Тегло\": \"4.4 кг\"}",
                            Brakes = 0,
                            Material = 0,
                            Suspention = "Амортисьорна вилка",
                            TyreSize = 12.0
                        },
                        new
                        {
                            Id = new Guid("b46a5b25-1e35-4006-b862-71b8b0f7e816"),
                            CategoryId = 4,
                            Color = "Black",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            DiscountId = 1,
                            ImageUrl = "bicycles/kids/Faro_12_black.jpg",
                            IsActive = true,
                            MakeId = new Guid("fb2ef438-d045-4e5c-8022-d979204b4f29"),
                            Name = "Faro",
                            Price = 279m,
                            Specification = "{\"Рамка\": \"лека алуминиева\", \"Седалка\": \"регулируема седалка от 350 мм до 400 мм\", \"Кормило\": \"регулируемо във височина от 490мм до 540мм, дължина - 400мм, диаметър - 22,2мм\", \"Спирачка\": \"V\", \"Тегло\": \"4.4 кг\"}",
                            Brakes = 1,
                            Material = 2,
                            Suspention = "Твърда вилка",
                            TyreSize = 12.0
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Part", b =>
                {
                    b.HasBaseType("BuyBike.Infrastructure.Data.Entities.Product");

                    b.ToTable("parts", null, t =>
                        {
                            t.HasComment("Bicycle parts");
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Item", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Order", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.OrderItem", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Item", "Item")
                        .WithMany("ItemOrders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_items_item_id");

                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Product", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");

                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("fk_products_discounts_discount_id");

                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Manufacturer", "Make")
                        .WithMany("Products")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_manufacturers_make_id");

                    b.Navigation("Category");

                    b.Navigation("Discount");

                    b.Navigation("Make");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Bicycle", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("BuyBike.Infrastructure.Data.Entities.Bicycle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bicycles_products_id");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Part", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("BuyBike.Infrastructure.Data.Entities.Part", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parts_products_id");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Discount", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Item", b =>
                {
                    b.Navigation("ItemOrders");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Product", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
