// <auto-generated />
using System;
using BuyBike.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BuyBike.Infrastructure.Migrations
{
    [DbContext(typeof(BuyBikeDbContext))]
    [Migration("20240312173731_seedBicycles")]
    partial class seedBicycles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name")
                        .HasComment("User First name");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name")
                        .HasComment("User Last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Manufacturer primary key");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Soft delete boolean property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name")
                        .HasComment("Manufacturer name");

                    b.HasKey("Id")
                        .HasName("pk_manufacturers");

                    b.ToTable("manufacturers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69ec3905-081e-433b-a8ec-5baef5cbf0e9"),
                            IsActive = true,
                            Name = "Giant"
                        },
                        new
                        {
                            Id = new Guid("d40d9dfe-8f24-4bce-8414-b1dbdd3a2df5"),
                            IsActive = true,
                            Name = "Cross"
                        },
                        new
                        {
                            Id = new Guid("62bc8c33-2658-4720-ad78-2bb6ba71ee87"),
                            IsActive = true,
                            Name = "Cube"
                        },
                        new
                        {
                            Id = new Guid("fb2ef438-d045-4e5c-8022-d979204b4f29"),
                            IsActive = true,
                            Name = "Head"
                        },
                        new
                        {
                            Id = new Guid("2a63178e-c137-4f76-8bb0-fb2a741c540b"),
                            IsActive = true,
                            Name = "Specialized"
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Model primary key");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color")
                        .HasComment("Bicycle model color (optional)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description")
                        .HasComment("Bicycle model description (optional");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender")
                        .HasComment("Gender (Undefined by default)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("image_url")
                        .HasComment("Model Image URL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Soft delete boolean property");

                    b.Property<Guid>("MakeId")
                        .HasColumnType("uuid")
                        .HasColumnName("make_id")
                        .HasComment("Model manufacturer id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name")
                        .HasComment("Bicycle model name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type")
                        .HasComment("Bicycle model Type (Enumeration)");

                    b.Property<double>("TyreSize")
                        .HasColumnType("double precision")
                        .HasColumnName("tyre_size")
                        .HasComment("Tyre size");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("MakeId")
                        .HasDatabaseName("ix_models_make_id");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_models_type");

                    b.ToTable("models", null, t =>
                        {
                            t.HasComment("Bicycle model");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0e61bd9-f6e9-4338-9671-65aff5e32224"),
                            Color = "Black",
                            Gender = 0,
                            ImageUrl = "https://www.velozona.bg/image/cache/catalog/GIANT-2022/MY21FATHOM_29_1_ColorBBlack_Charcoal-1000x1000.jpg",
                            IsActive = true,
                            MakeId = new Guid("69ec3905-081e-433b-a8ec-5baef5cbf0e9"),
                            Name = "Fathom 1",
                            Type = 0,
                            TyreSize = 29.0
                        },
                        new
                        {
                            Id = new Guid("4ae30432-6417-4c8b-ad3c-6643177c3a00"),
                            Color = "White",
                            Gender = 0,
                            ImageUrl = "https://www.velozona.bg/image/cache/catalog/GIANT-2021/MY21FATHOM_29_1_ColorADesertSage-1000x1000.jpg",
                            IsActive = true,
                            MakeId = new Guid("69ec3905-081e-433b-a8ec-5baef5cbf0e9"),
                            Name = "Fathom 1",
                            Type = 0,
                            TyreSize = 29.0
                        },
                        new
                        {
                            Id = new Guid("778a39ee-879b-49e1-a76f-87e5b039204c"),
                            Color = "White",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            Gender = 0,
                            ImageUrl = "https://www.bikecenter.bg/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/_/2/_29_specialized_epic_expert_morn_dknvy.jpg",
                            IsActive = true,
                            MakeId = new Guid("2a63178e-c137-4f76-8bb0-fb2a741c540b"),
                            Name = "Epic Expert Morn",
                            Type = 0,
                            TyreSize = 29.0
                        },
                        new
                        {
                            Id = new Guid("e2a5ce77-eb7c-4809-a45a-dc9ced72921f"),
                            Color = "Grey",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            Gender = 1,
                            ImageUrl = "https://www.bikecenter.bg/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/_/2/_28_cube_kathmandu_slx_sil_blk.jpg",
                            IsActive = true,
                            MakeId = new Guid("62bc8c33-2658-4720-ad78-2bb6ba71ee87"),
                            Name = "Kathmandu XLR",
                            Type = 2,
                            TyreSize = 28.0
                        },
                        new
                        {
                            Id = new Guid("cf155129-97cd-4957-8251-0790f4252cd8"),
                            Color = "Grey",
                            Gender = 2,
                            ImageUrl = "https://www.bikecenter.bg/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/_/2/_28_cube_nulane_pro_gry_blk_tr.jpg",
                            IsActive = true,
                            MakeId = new Guid("62bc8c33-2658-4720-ad78-2bb6ba71ee87"),
                            Name = "Nulane Pro",
                            Type = 2,
                            TyreSize = 28.0
                        },
                        new
                        {
                            Id = new Guid("3fa408ee-f3d4-4de0-8ef8-34f2db15be8e"),
                            Color = "Red",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            Gender = 0,
                            ImageUrl = "https://www.bikecenter.bg/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/_/2/_28_specialized_allez_e5_disc_mrn_sil.jpg",
                            IsActive = true,
                            MakeId = new Guid("2a63178e-c137-4f76-8bb0-fb2a741c540b"),
                            Name = "Allez E5",
                            Type = 1,
                            TyreSize = 28.0
                        },
                        new
                        {
                            Id = new Guid("a9401b93-3c58-470d-b48e-6bfb5731c4c0"),
                            Color = "Black",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            Gender = 0,
                            ImageUrl = "https://www.bikecenter.bg/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/_/2/_28_cube_litening_aero_c68x_pro_crbn.jpg",
                            IsActive = true,
                            MakeId = new Guid("62bc8c33-2658-4720-ad78-2bb6ba71ee87"),
                            Name = "Litening Aero",
                            Type = 1,
                            TyreSize = 28.0
                        },
                        new
                        {
                            Id = new Guid("265da868-5b3a-46c1-b098-57af4170151e"),
                            Color = "Blue",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            Gender = 0,
                            ImageUrl = "https://www.velozona.bg/image/cache/catalog/CROSS/12-cross-boxer-alloy-boy-1276x1276.jpg",
                            IsActive = true,
                            MakeId = new Guid("d40d9dfe-8f24-4bce-8414-b1dbdd3a2df5"),
                            Name = "Boxer",
                            Type = 3,
                            TyreSize = 12.0
                        },
                        new
                        {
                            Id = new Guid("88d6ba12-8d54-4191-a2a2-01d0a5f24f07"),
                            Color = "Black",
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum deserunt voluptas, voluptate laborum quo ipsa ut accusantium beatae autem libero nam nobis maiores adipisci incidunt ad veniam tempora asperiores iure!",
                            Gender = 0,
                            ImageUrl = "https://www.velozona.bg/image/cache/catalog/HEAD-2019/HEAD-Faro-12-black-1276x1276.jpg",
                            IsActive = true,
                            MakeId = new Guid("fb2ef438-d045-4e5c-8022-d979204b4f29"),
                            Name = "Faro",
                            Type = 3,
                            TyreSize = 12.0
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Order identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("address")
                        .HasComment("Order shipping street address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("city")
                        .HasComment("Order delivery city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("country")
                        .HasComment("Order delivery country");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date")
                        .HasComment("Order time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Order user identifier");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("integer")
                        .HasColumnName("zip_code")
                        .HasComment("Order shipping zip code");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("User products order");
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id")
                        .HasComment("Order id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id")
                        .HasComment("Product id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity")
                        .HasComment("Product quantity");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("pk_order_products");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_products_product_id");

                    b.ToTable("order_products", null, t =>
                        {
                            t.HasComment("Connecting table between orders and products");
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Product primary key");

                    b.Property<int>("InStock")
                        .HasColumnType("integer")
                        .HasColumnName("in_stock")
                        .HasComment("Bicycle count in stock");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Soft delete boolean property");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price")
                        .HasComment("Product price");

                    b.HasKey("Id");

                    b.ToTable("products", null, t =>
                        {
                            t.HasComment("Shop product model");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Bicycle", b =>
                {
                    b.HasBaseType("BuyBike.Infrastructure.Data.Entities.Product");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id")
                        .HasComment("Bicycle model Id");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size")
                        .HasComment("Bicycle frame size (enumeration)");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_bicycles_model_id");

                    b.ToTable("bicycles", null, t =>
                        {
                            t.HasComment("Bicycle");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("78804049-030f-4373-be3c-dfb4df261846"),
                            InStock = 20,
                            IsActive = true,
                            Price = 3499m,
                            ModelId = new Guid("e0e61bd9-f6e9-4338-9671-65aff5e32224"),
                            Size = 3
                        },
                        new
                        {
                            Id = new Guid("e31d06f0-ba78-40de-8cae-039844229fbe"),
                            InStock = 10,
                            IsActive = true,
                            Price = 3499m,
                            ModelId = new Guid("e0e61bd9-f6e9-4338-9671-65aff5e32224"),
                            Size = 4
                        },
                        new
                        {
                            Id = new Guid("e877e2a4-5a84-41d4-acfc-443a350b1506"),
                            InStock = 5,
                            IsActive = true,
                            Price = 3499m,
                            ModelId = new Guid("e0e61bd9-f6e9-4338-9671-65aff5e32224"),
                            Size = 2
                        },
                        new
                        {
                            Id = new Guid("751f85bf-9f3a-443d-a66f-1ad719e50b4e"),
                            InStock = 9,
                            IsActive = true,
                            Price = 3499m,
                            ModelId = new Guid("4ae30432-6417-4c8b-ad3c-6643177c3a00"),
                            Size = 2
                        },
                        new
                        {
                            Id = new Guid("122b4402-a081-4bcb-aeb4-face1ca35afe"),
                            InStock = 33,
                            IsActive = true,
                            Price = 3499m,
                            ModelId = new Guid("4ae30432-6417-4c8b-ad3c-6643177c3a00"),
                            Size = 3
                        },
                        new
                        {
                            Id = new Guid("6f88c752-2b55-4380-8287-0e85a569abd5"),
                            InStock = 12,
                            IsActive = true,
                            Price = 13599m,
                            ModelId = new Guid("778a39ee-879b-49e1-a76f-87e5b039204c"),
                            Size = 3
                        },
                        new
                        {
                            Id = new Guid("c77e1e5a-86eb-4356-86c1-c6868494df85"),
                            InStock = 18,
                            IsActive = true,
                            Price = 3899m,
                            ModelId = new Guid("e2a5ce77-eb7c-4809-a45a-dc9ced72921f"),
                            Size = 3
                        },
                        new
                        {
                            Id = new Guid("f1c54893-bdc1-4b37-baad-db033b2d359b"),
                            InStock = 0,
                            IsActive = true,
                            Price = 3899m,
                            ModelId = new Guid("e2a5ce77-eb7c-4809-a45a-dc9ced72921f"),
                            Size = 4
                        },
                        new
                        {
                            Id = new Guid("4f195fb8-03d7-42c0-bbe6-3edc190ce51e"),
                            InStock = 5,
                            IsActive = true,
                            Price = 3899m,
                            ModelId = new Guid("cf155129-97cd-4957-8251-0790f4252cd8"),
                            Size = 1
                        },
                        new
                        {
                            Id = new Guid("dd32437b-1dfb-4a4d-bca4-43b1294a925e"),
                            InStock = 14,
                            IsActive = true,
                            Price = 2399m,
                            ModelId = new Guid("3fa408ee-f3d4-4de0-8ef8-34f2db15be8e"),
                            Size = 3
                        },
                        new
                        {
                            Id = new Guid("0c3f8754-5dce-4fd5-bdb6-79fc79b07e75"),
                            InStock = 7,
                            IsActive = true,
                            Price = 9199m,
                            ModelId = new Guid("a9401b93-3c58-470d-b48e-6bfb5731c4c0"),
                            Size = 3
                        },
                        new
                        {
                            Id = new Guid("c8a565f6-eb03-44b1-bed9-68dcdbff914e"),
                            InStock = 22,
                            IsActive = true,
                            Price = 299m,
                            ModelId = new Guid("265da868-5b3a-46c1-b098-57af4170151e"),
                            Size = 5
                        },
                        new
                        {
                            Id = new Guid("b46a5b25-1e35-4006-b862-71b8b0f7e816"),
                            InStock = 17,
                            IsActive = true,
                            Price = 279m,
                            ModelId = new Guid("88d6ba12-8d54-4191-a2a2-01d0a5f24f07"),
                            Size = 5
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Part", b =>
                {
                    b.HasBaseType("BuyBike.Infrastructure.Data.Entities.Product");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Part name");

                    b.ToTable("parts", null, t =>
                        {
                            t.HasComment("Bicycle parts");
                        });
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Model", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Manufacturer", "Make")
                        .WithMany("Models")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_models_manufacturers_make_id");

                    b.Navigation("Make");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Order", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.OrderProduct", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_orders_order_id");

                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Bicycle", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("BuyBike.Infrastructure.Data.Entities.Bicycle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bicycles_products_id");

                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Model", "Model")
                        .WithMany("Bicycles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bicycles_models_model_id");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Part", b =>
                {
                    b.HasOne("BuyBike.Infrastructure.Data.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("BuyBike.Infrastructure.Data.Entities.Part", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parts_products_id");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Manufacturer", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Model", b =>
                {
                    b.Navigation("Bicycles");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("BuyBike.Infrastructure.Data.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
